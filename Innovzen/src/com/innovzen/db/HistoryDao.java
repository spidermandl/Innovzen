package com.innovzen.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HISTORY.
*/
public class HistoryDao extends AbstractDao<History, Long> {

    public static final String TABLENAME = "HISTORY";

    /**
     * Properties of entity History.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, Long.class, "date", false, "DATE");
        public final static Property Inhale = new Property(2, Integer.class, "inhale", false, "INHALE");
        public final static Property HoldInhale = new Property(3, Integer.class, "holdInhale", false, "HOLD_INHALE");
        public final static Property Exhale = new Property(4, Integer.class, "exhale", false, "EXHALE");
        public final static Property HoldExhale = new Property(5, Integer.class, "holdExhale", false, "HOLD_EXHALE");
        public final static Property Duration = new Property(6, Long.class, "duration", false, "DURATION");
    };


    public HistoryDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HISTORY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DATE' INTEGER," + // 1: date
                "'INHALE' INTEGER," + // 2: inhale
                "'HOLD_INHALE' INTEGER," + // 3: holdInhale
                "'EXHALE' INTEGER," + // 4: exhale
                "'HOLD_EXHALE' INTEGER," + // 5: holdExhale
                "'DURATION' INTEGER);"); // 6: duration
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, History entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date);
        }
 
        Integer inhale = entity.getInhale();
        if (inhale != null) {
            stmt.bindLong(3, inhale);
        }
 
        Integer holdInhale = entity.getHoldInhale();
        if (holdInhale != null) {
            stmt.bindLong(4, holdInhale);
        }
 
        Integer exhale = entity.getExhale();
        if (exhale != null) {
            stmt.bindLong(5, exhale);
        }
 
        Integer holdExhale = entity.getHoldExhale();
        if (holdExhale != null) {
            stmt.bindLong(6, holdExhale);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(7, duration);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public History readEntity(Cursor cursor, int offset) {
        History entity = new History( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // inhale
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // holdInhale
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // exhale
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // holdExhale
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // duration
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, History entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setInhale(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setHoldInhale(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setExhale(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setHoldExhale(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDuration(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(History entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(History entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
